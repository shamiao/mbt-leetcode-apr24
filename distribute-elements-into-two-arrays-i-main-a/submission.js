const wasm_bytecode_base64 = `
AGFzbQEAAAABuoCAgAAKYAF/AGAAAX9gAX8Bf2ACf38AYAJ/fwF/YAN/f38AYAN/f38Bf2AFf39/
f38AYAV/f39/fwF/YAAAApeAgIAAAQhzcGVjdGVzdApwcmludF9jaGFyAAADxYCAgABEAAECAwID
AgMCAgIBAgAAAAACAgIDAgMCBAAFAgQGBAQGAgQHBgYGAgIICAgEBAIEBgQCAgQEAgIEAQQCAgIE
AgIBAgkEhYCAgAABcAEAAAWDgICAAAEAAQa3gICAAAp/AEH40wALfwFBAAt/AEEEC38AQRALfwBB
CAt/AEEBC38AQQILfwBBgIAEC38BQQALfwFBAAsH1oCAgAAGDm1vb25iaXQubWVtb3J5AgAOcmFl
bF9oZWFwX2Jhc2UDAA5wdXNoX2lucHV0X251bQBBBXNvbHZlAEIOZ2V0X291dHB1dF9udW0AQwZf
c3RhcnQARAmIgICAAAEGAEEAC3AACqKbgIAARImAgIAAACMAIAA2AgALh4CAgAAAIwAoAgALh4CA
gAAAIAAoAgALiYCAgAAAIAAgATYCAAuHgICAAAAgACgCBAuJgICAAAAgACABNgIEC4eAgIAAACAA
KAIIC4mAgIAAACAAIAE2AggLh4CAgAAAIAAjBnELjYCAgAAAIAAjBEEBa0F/c3ELh4CAgAAAIAAj
BXEL4oCAgAABA39BgIAEIQAjACEBIAAgAWshAiMAIwJqEAEjACACQQIjAmxrIwZyNgIEIwBBADYC
CCMAQQA2AgwjACACakECIwJsayMAIwJqKAIANgIAIwAgAmpBASMCbGsjBTYCAEEAC66AgIAAAQF/
EAIhAQNAIAFBAEcEQCABEAMQCiAATwRAIAEPBSABEAUhAQsMAQsLQQAPC6aAgIAAAQF/EAIhASAA
IAEQBiABQQBHBEAgASAAEAgLIABBABAIIAAQAQuxgICAAAECfyAAEAUhASAAEAchAiABQQBHBEAg
ASACEAgLIAAQAkYEQCABEAEFIAIgARAGCwuZgYCAAAEGfyAAEAMQCiEEIAQhBSAAIQEgARADEAlB
AEYEQCABIwJrKAIAEAohBiABIAZrIQMgAxAPIAUgBmohBSADIQELIAEhAiAAIARqIQEgARADEAtB
AEYEQCABEAMQCiEGIAEQDyAFIAZqIQUgASAGaiEBCyACIARHBEAgABAPIAIgBSMGchAEIAEjAmsg
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
EDohARA6IQIgASAAQQAQNhA5GiACIABBARA2EDkaAn9BAgMCIQMgAyAAEDdIBH8gASABEDdBAWsQ
NiACIAIQN0EBaxA2SgR/IAEgACADEDYQOQUgAiAAIAMQNhA5CxogA0EBagwBBUEACwsLGiABIAIQ
OxogAQuIgICAAAAjCCAAEDkLkoCAgAAAIwkjCBBANgIEIwkoAgQQNwuLgICAAAAjCSgCBCAAEDYL
o4CAgAABAX8QOiQIQQQQEyIAQQAQFSAAQQEQFyAAEDo2AgQgACQJCwvxhYCAAAEAQZDOAAvoBfMM
AABzAHUAYgBfAHMAdAByAGkAbgBnACAAbwB1AHQAIABvAGYAIABiAG8AdQBuAGQAAAEAAAAA8xAA
AGIAbABpAHQAXwBmAHIAbwBtAF8AcwB0AHIAaQBuAGcAIABvAHUAdAAgAG8AZgAgAGIAbwB1AG4A
ZABzAAAAAAMAAAAA8woAAGIAbABpAHQAIABvAHUAdAAgAG8AZgAgAGIAbwB1AG4AZABzAAAAAAMA
AAAA8wMAAHQAcgB1AGUAAAAAAwAAAAAAAAAA8wMAAGYAYQBsAHMAZQAAAQAAAAAAAAAA8woAACAA
YgB1AHQAIAB0AGgAZQAgAGkAbgBkAGUAeAAgAGkAcwAgAAAAAAMAAAAA8xYAAGkAbgBkAGUAeAAg
AG8AdQB0ACAAbwBmACAAYgBvAHUAbgBkAHMAOgAgAHQAaABlACAAbABlAG4AIABpAHMAIABmAHIA
bwBtACAAMAAgAHQAbwAgAAAAAAMAAAAA8xYAAGMAYQBsAGwAZQBkACAAYABSAGUAcwB1AGwAdAA6
ADoAdQBuAHcAcgBhAHAAKAApAGAAIABvAG4AIABhAG4AIABgAEUAcgByAGAAIAB2AGEAbAB1AGUA
AAEAAAAA8wcAAGAAIABpAHMAIABuAG8AdAAgAHQAcgB1AGUAAAEAAAAAAAAAAPMCAAA6ACAAYAAA
AQAAAADzBAAARgBBAEkATABFAEQAOgAAAQAAAADzMAAALwBoAG8AbQBlAC8AYQB0AGwAYQBzAC8A
bQBiAHQALQBwAHIAagBzAC8AbQBiAHQALQBsAGUAZQB0AGMAbwBkAGUALQBhAHAAcgAyADQALwBk
AGkAcwB0AHIAaQBiAHUAdABlAC0AZQBsAGUAbQBlAG4AdABzAC0AaQBuAHQAbwAtAHQAdwBvAC0A
YQByAHIAYQB5AHMALQBpAC8AbABpAGIALgBtAGIAdAA6ADYAOgAzAC0ANgA6ADQANQAAAAADAAAA
AA==`.trim().replace("\n", "")

/**
 * @param {number[]} nums
 * @return {number[]}
 */
var resultArray = function(nums) {
  const wasm_bytecode = Buffer.from(wasm_bytecode_base64, "base64")
  const wasm_module = new WebAssembly.Module(wasm_bytecode)
  const wasm_import = {
    spectest: {
      print_i32: (x) => {},
      print_char: (x) => {},
      print_f64: (x) => {},
    },
  };
  const wasm_instance = new WebAssembly.Instance(wasm_module, wasm_import)

  /** @type {Function} */
  const push_input_num = wasm_instance.exports.push_input_num
  /** @type {Function} */
  const solve = wasm_instance.exports.solve
  /** @type {Function} */
  const get_output_num = wasm_instance.exports.get_output_num

  for (const num of nums) {
    push_input_num(num)
  }
  let output_count = solve()
  let ret = []
  for (let i = 0; i < output_count; i++) {
    ret.push(get_output_num(i))
  }
  return ret
};
