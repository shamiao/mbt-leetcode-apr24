/**
 * @param {WebAssembly.Memory} memory 
 * @param {BigInt} magic_number 
 * @returns {Number | null}
 */
function find_in_memory(memory, magic_number) {
  let header = [
    0xBF3D1E07, 0xFF724BED,
    Number(magic_number & BigInt("0xffffffff")),
    Number((magic_number & BigInt("0xffffffff00000000")) >> BigInt(32)),
  ];
  const chk_vec = []
  header.forEach(val_u32 => {
    for (let i = 0; i < 4; i++) {
      chk_vec.push((val_u32 >> (i * 8)) & 0xFF);
    }
  });
  const chk = new Uint8Array(chk_vec);
  const mem = new Uint8Array(memory.buffer);

  for (let i = 0; i < mem.length - chk.length; i++) {
    let same = true;
    for (let j = 0; j < chk.length; j++) {
      if (chk[j] != mem[i + j]) {
        same = false;
        break;
      }
    }
    if (same) {
      return i + chk.length;
    }
  }

  return null;
}

const wasm_bytecode_base64 = `
AGFzbQEAAAAB2ICAgAAOYAJ/fwF/YAF/AGAAAX9gAX8Bf2ACf38AYAN/f38AYAN/f38Bf2AFf39/
f38AYAV/f39/fwF/YAR/f39/AX9gBH5/f38Bf2ADfn9/AX9gA39+fwF/YAAAApeAgIAAAQhzcGVj
dGVzdApwcmludF9jaGFyAAED3ICAgABbAQIDBAMEAwQDAwMCAwEBAQEDAwMEAwQDAAEFAwAGAAAA
BgMABwYGBgMDAwgICAAAAwAGAAMDAAAABgMDAwMAAAMDAgAGAAMDAwMAAwAGCQAGBgAACgALAAYM
DQSFgICAAAFwAQMDBYOAgIAAAQABBrKAgIAACX8AQfDYAAt/AUEAC38AQQQLfwBBEAt/AEEIC38A
QQELfwBBAgt/AEGAgAQLfwFBAAsHy4CAgAAFDm1vb25iaXQubWVtb3J5AgAOcmFlbF9oZWFwX2Jh
c2UDAAphcHBlbmRfYXJyAFkPYWxsb2NhdGVfYnVmZmVyAFoGX3N0YXJ0AFsJkYCAgAABBgBBAAtw
A9JQC9JTC9JWCwqdp4CAAFuJgICAAAAjACAANgIAC4eAgIAAACMAKAIAC4eAgIAAACAAKAIAC4mA
gIAAACAAIAE2AgALh4CAgAAAIAAoAgQLiYCAgAAAIAAgATYCBAuHgICAAAAgACgCCAuJgICAAAAg
ACABNgIIC4eAgIAAACAAIwZxC42AgIAAACAAIwRBAWtBf3NxC4eAgIAAACAAIwVxC+KAgIAAAQN/
QYCABCEAIwAhASAAIAFrIQIjACMCahABIwAgAkECIwJsayMGcjYCBCMAQQA2AggjAEEANgIMIwAg
AmpBAiMCbGsjACMCaigCADYCACMAIAJqQQEjAmxrIwU2AgBBAAuugICAAAEBfxACIQEDQCABQQBH
BEAgARADEAogAE8EQCABDwUgARAFIQELDAELC0EADwumgICAAAEBfxACIQEgACABEAYgAUEARwRA
IAEgABAICyAAQQAQCCAAEAELsYCAgAABAn8gABAFIQEgABAHIQIgAUEARwRAIAEgAhAICyAAEAJG
BEAgARABBSACIAEQBgsLmYGAgAABBn8gABADEAohBCAEIQUgACEBIAEQAxAJQQBGBEAgASMCaygC
ABAKIQYgASAGayEDIAMQDyAFIAZqIQUgAyEBCyABIQIgACAEaiEBIAEQAxALQQBGBEAgARADEAoh
BiABEA8gBSAGaiEFIAEgBmohAQsgAiAERwRAIAAQDyACIAUjBnIQBCABIwJrIAUjBnI2AgAgAhAO
CwvkgICAAAEIfyAAIwdqQQFrIwduIQEgAUAAIQIgAiMHbCMCayEDIAEjB2whBCADEAMQCSEFIAQg
BXIhBiADIAYQBCADIARqIwJrIQcgByAGNgIAIAMgBGohCCAIIwU2AgAgAxAOIAMQEAvXgYCAAAEI
fyMBRQRAEAxFBEBBASQBCwsgAEEARgRAQQAPCyAAIwJqIQAgACMDSQRAIwMhAQUjBCAAIwRqQQFr
IwRubCEBCyABEA0hAiACQQBGBEAgARARIAEQDSECCyACEAMQCiEDIAIQDyADIAFrIwNPBEAgAhAD
EAkhBCACIAEgBHIjBXIQBCADIAFrIwZyIQUgAiABaiEGIAYgBTYCACACIANqIwJrIQcgByAFNgIA
IAYQDgUgAiADaiEIIAggCBADIwZyEAQgAiACEAMjBXIQBAsgAiMCag8Li4CAgAABAX9BBCAAahAS
C4uAgIAAACAAKAIAQf8BcQuTgICAAAAgACAAKAIAQYB+cSABcjYCAAuKgICAAAAgACgCAEEIdguW
gICAAAAgACAAKAIAQf8BcSABQQh0cjYCAAuegICAAAEBfyAAEBZBBGwhASABIAAgAWotAANrQQFr
QQF1C42AgIAAACAAIAFBAXRqLwEEC6KAgIAAAQF/A0AgASAAEBhIBEAgACABEBkQACABQQFqIQEM
AQsLC5aAgIAAACAAIAJMBEAgACABTgRABQALBQALC4aAgIAAACAAEBYLmoCAgAAAIAFBACAAEBxB
AWsQGyAAIAFBBGxqKAIEC56AgIAAACABQQAgABAcQQFrEBsgACABQQRsaiACNgIEQQALxYCAgAAB
An8gAEEASARAAAsgAEEEbBATIQIgAiAAEBcgAkEAEBUDQCADIABIBEAgAiADQQRsaiABNgIEIANB
AWohAwwBCwsgAgv1gICAAAEFfyAAQQRqQQRtIQQgBEEEbBATIQIgAiAEEBcgAkH2ARAVIAJBBGoh
BSAFIARBAWtBBGxBAGo2AgADQCADIABIBEAgAiADaiABOgAEIANBAWohAwwBCwtBAyAAQQRvayEG
IAUgBEEEbEEBa2ogBjoAACACC5eAgIAAACABQQAgABAjQQFrEBsgACABai0ABAubgICAAAAgAUEA
IAAQI0EBaxAbIAAgAWogAjoABEEAC5uAgIAAAQF/IAAQFkEEbCEBIAEgACABai0AA2tBAWsLjYGA
gAABB38gABAYQQF0IQIgARAYQQF0IQMgAiADaiEEIARBBGpBBG0hBSAFQQRsEBMhBiAGQfMBEBUg
BiAFEBcgBkEEaiEHIAcgBUEBa0EEbEEAajYCACAHIABBBGogAvwKAAAgByACaiABQQRqIAP8CgAA
QQMgBEEEb2shCCAHIAVBBGxBAWtqIAg6AAAgBguYgICAAABBBCAAaiABakEEIAJqIANqIAT8CgAA
C+2AgIAAAQR/IAJBBGpBBG0hAyADQQRsEBMhBCAEQfMBEBUgBCADEBcgBEEEaiEFIAUgA0EBa0EE
bEEAajYCAEEEIARqQQBqQQQgAGogAWogAvwKAABBAyACQQRvayEGIAUgA0EEbEEBa2ogBjoAACAE
C4qAgIAAACAAIAEgAhAmC7mAgIAAAAJ/QQEgAkEASA0AGgJ/QQEgAUEASA0AGiABIAJqIAAQI0oL
CwR/QZDOABAaAAUgACABIAIQJwsLkICAgAAAIAAoAgRBACAAKAIIECgLkICAgAAAIAAQNhAaQcjO
ABAaQQALwICAgAABA38gAEEBSAR/QQEFIAALIgFBABAgIQJBDBATIgNBABAVIANBAxAXIAMgAjYC
DCADQQA2AgggAyACNgIEIAMLuIGAgAABCH8gASAEakEBayEFIAMgBGpBAWshBiAAECMhByACEBgh
CAJ/QQEgBEEASA0AGgJ/QQEgAUEASA0AGgJ/QQEgBSAHTg0AGgJ/QQEgA0EASA0AGiAGIAhOCwsL
CwR/QdjOABAaAAUgAyAEaiEJAn8gAyABAwAhCyEKIAogCUgEfyACIAoQGSEMIAAgCyAMQf8BcRAi
GiAAIAtBAWogDEEIdhAiGiAKQQFqIAtBAmoMAQVBAAsLCwsLkICAgAAAIAAgASACIAMgBBAlQQAL
9ICAgAABBH8gASAEakEBayEFIAMgBGpBAWshBiAAECMhByACECMhCAJ/QQEgBEEASA0AGgJ/QQEg
AUEASA0AGgJ/QQEgBSAHTg0AGgJ/QQEgA0EASA0AGiAGIAhOCwsLCwR/QaDPABAaAAUgACABIAIg
AyAEEC0LC+qAgIAAAQJ/IAAoAgQQIyICQQBMBH9BASECQQAFQQALGgJ/A38gAiABSAR/IAJBAmwh
AgwBBUEACwsLGiACIAAoAgQQI0cEfyACQQAQICIDQQAgACgCBEEAIAAoAggQLhogACADNgIEQQAF
QQALC72AgIAAACAAIAAoAgggARAYQQJsahAvGiAAKAIEIAAoAgggAUEAIAEQGBAsGiAAIAAoAggg
ARAYQQJsajYCCEEAC5CAgIAAACAABH9B0M8ABUHozwALC4qAgIAAACABIAAQMRAwC4yBgIAAAQR/
IAIiA0GAgARIBH8gACABIANB/wFxECIaIAAgAUEBaiADQQh2ECIaQQIFIANBgIAEayIEQQp2QYCw
A3IhBSAEQf8HcUGAuANyIQYgACABIAVB/wFxECIaIAAgAUEBaiAFQQh2ECIaIAAgAUECaiAGQf8B
cRAiGiAAIAFBA2ogBkEIdhAiGkEECwuwgICAAAEBfyAAIAAoAghBBGoQLxogACgCBCAAKAIIIAEQ
MyECIAAgACgCCCACajYCCEEAC5KAgIAAACAAQQBIBH9BACAAawUgAAsLqYCAgAABAn9BCxArIQEg
AEEASAR/IAFBLRA0BUEACxogASICIAAQNxogARApC6mAgIAAAQF/IAFBCm0iAkEARwR/IAAgAhA3
BUEACxogACABQQpvEDVBMGoQNAvJgICAAAEBfwJ/QQEgAUEASA0AGiABIAAoAghOCwR/IAAoAggh
AkGw0AAgAhA2ECRBgNAAECQgARA2ECQQGgAFQQALGiAAKAIEIAEQHQvJgICAAAEBfwJ/QQEgAUEA
SA0AGiABIAAoAghOCwR/IAAoAgghAkGw0AAgAhA2ECRBgNAAECQgARA2ECQQGgAFQQALGiAAKAIE
IAEQHQvLgICAAAEBfwJ/QQEgAUEASA0AGiABIAAoAghOCwR/IAAoAgghA0Gw0AAgAxA2ECRBgNAA
ECQgARA2ECQQGgAFQQALGiAAKAIEIAEgAhAeC4eAgIAAACAAKAIIC4eAgIAAACAAKAIIC9eAgIAA
AQR/IAAoAggiAUEARgR/QQgFIAFBAmwLIgJBABAfIQMCf0EAAwMhBCAEIAFIBH8gAyAEIAAoAgQg
BBAdEB4aIARBAWoMAQVBAAsLCxogACADNgIEQQAL14CAgAABBH8gACgCCCIBQQBGBH9BCAUgAUEC
bAsiAkEAEB8hAwJ/QQADAyEEIAQgAUgEfyADIAQgACgCBCAEEB0QHhogBEEBagwBBUEACwsLGiAA
IAM2AgRBAAu4gICAAAAgACgCCCAAKAIEEBxGBH8gABA+BUEACxogACgCBCAAKAIIIAEQHhogACAA
KAIIQQFqNgIIQQALuICAgAAAIAAoAgggACgCBBAcRgR/IAAQPQVBAAsaIAAoAgQgACgCCCABEB4a
IAAgACgCCEEBajYCCEEAC6iAgIAAAQF/QQgQEyIBQQAQFSABQQIQFyABQQA2AgggASAAQQAQHzYC
BCABC6iAgIAAAQF/QQgQEyIBQQAQFSABQQIQFyABQQA2AgggASAAQQAQHzYCBCABC6iAgIAAAQF/
QQgQEyIAQQAQFSAAQQIQFyAAQQA2AgggAEEAQQAQHzYCBCAAC66AgIAAAQF/An9BAAMDIQIgAiAB
KAIISAR/IAAgASACEDgQPxogAkEBagwBBUEACwsLC9KAgIAAAQF/IAFBAEgEf0GQ0QAQGgAFQQAL
GiABIAAoAghIBH8gACABNgIIQQAFAn8gACgCCAMDIQMgAyABSAR/IAAgAhBAGiADQQFqDAEFQQAL
CwsLC92AgIAAAQV/IAAQFCEEIARBAUYEfyAAKAIEIQJBBBATIgZBARAVIAZBARAXIAYgAjYCBCAG
BSAAKAIEIQNBBBATIgVBABAVIAVBARAXIAUgASADIAEoAgQRAAA2AgQgBQsLoYCAgAABAn8gABAU
IQIgAkEBRgR/IAAoAgQiAQVBwNEAEBoACwuhgICAAAECfyAAEBQhAiACQQFGBH8gACgCBCIBBUHA
0QAQGgALC4SAgIAAACAAC5WAgIAAAQF/QTIQKyEBIAAgARAyGiABECkL2oCAgAABA38gABBJBH9B
BBATIgNBARAVIANBARAXIANBADYCBCADBSAAEEohAkEEEBMiBEEAEBUgBEEBEBcgBEHY0gAgARAk
QcjSABAkIAIQJEGg0gAQJDYCBCAECwuKgYCAAAEDfyAAEDtBA05B8NIAEEsQSBoQQyEBEEMhAiAB
IABBABA4ED8aIAIgAEEBEDgQPxoCf0ECAwMhAyADIAAQO0gEfyABIAEQO0EBaxA4IAIgAhA7QQFr
EDhKBH8gASAAIAMQOBA/BSACIAAgAxA4ED8LGiADQQFqDAEFQQALCwsaIAEgAhBEGiABC7uAgIAA
ACAAQQBGBH8gAUEARgR/QQEFQQALBSAAQQFGBH8gAUEBRgR/QQEFQQALBSABQQJGBH9BAQVBAAsL
Cwu1gICAAAAgAkEAEE0EfyAABQJ/QQEgAkEBEE0NABogAkECEE0LBH8gAUEBayAAawVBuNQAEBoA
CwsL2YCAgAABAn8gA0EEaiACECNMQfjUABBLQejUABBGEEcaAn9BAAMDIQQgBEEESAR/IARBBCAB
EE4hBSACIAMgBWogACAEQQhsdkH/AXEQIhogBEEBagwBBUEACwsLC4eAgIAAACABEBoAC4yAgIAA
ACAAQQAgASACEE8L4oCAgAABA38gAUEEaiAAECNMQaDWABBLQZDWABBGEEcaQQAhAwJ/QQADAyEE
IARBBEgEfyABIARBBCACEE5qIQUgAyAAIAUQIUH/AXFBCCAEbHRyIQMgBEEBagwBBUEACwsLGiAD
C4eAgIAAACABEBoAC4qAgIAAACAAIAFBABBSC9uAgIAAAQJ/IANBCGogAhAjTEHQ1wAQS0HA1wAQ
RhBHGgJ/QQADAyEEIARBCEgEfyAEQQggARBOIQUgAiADIAVqIAAgBEEIbKyIQv8Bg6cQIhogBEEB
agwBBUEACwsLC4eAgIAAACABEBoAC4yAgIAAACAAQQAgASACEFUL94CAgAABA38gAUEIakEIaiEC
IwggABA5ECMgAkgEfyMIIAAQOSEDIwggACABQQhqQQhqQQAQIBA6GgJ/QQADAyEEAn9BACAEQRBI
RQ0AGiAEIAMQI0gLBH8jCCAAEDkgBCADIAQQIRAiGiAEQQFqDAEFQQALCwsFQQALC5GBgIAAAQR/
IAAQQiEDAn9BAAMDIQQgBCAASAR/IAMjCCABEDlBECAEQQRsahBUED8aIARBAWoMAQVBAAsLCxog
AxBMIQUgAiAFEDtBBGwQWBoCf0EAAwMhBiAGIAUQO0gEfyAFIAYQOBAqGiAFIAYQOCMIIAIQOUEQ
IAZBBGxqEFEaIAZBAWoMAQVBAAsLCxogBRA7C5KBgIAAAQJ/IABBAE4EfyAAIwgQPE4EfyMIIABB
AWpBAEEAECAQRQVBAAsaIAAFIwhBAEEAECAQQBojCBA8QQFrCyEDIAJBCGpBCGohBCMIIAMQORAj
IARIBH8jCCADIAJBCGpBCGpBABAgEDoaQoe89Pnb/ZK5fyMIIAMQOUEAEFcFQQALGiABIwggAxA5
QQgQVxogAwuIgICAAABBAhBBJAgLC+mKgIAAAQBBkM4AC+AK8wwAAHMAdQBiAF8AcwB0AHIAaQBu
AGcAIABvAHUAdAAgAG8AZgAgAGIAbwB1AG4AZAAAAQAAAADzAQAACgAAAQAAAAAAAAAA8xAAAGIA
bABpAHQAXwBmAHIAbwBtAF8AcwB0AHIAaQBuAGcAIABvAHUAdAAgAG8AZgAgAGIAbwB1AG4AZABz
AAAAAAMAAAAA8woAAGIAbABpAHQAIABvAHUAdAAgAG8AZgAgAGIAbwB1AG4AZABzAAAAAAMAAAAA
8wMAAHQAcgB1AGUAAAAAAwAAAAAAAAAA8wMAAGYAYQBsAHMAZQAAAQAAAAAAAAAA8woAACAAYgB1
AHQAIAB0AGgAZQAgAGkAbgBkAGUAeAAgAGkAcwAgAAAAAAMAAAAA8xYAAGkAbgBkAGUAeAAgAG8A
dQB0ACAAbwBmACAAYgBvAHUAbgBkAHMAOgAgAHQAaABlACAAbABlAG4AIABpAHMAIABmAHIAbwBt
ACAAMAAgAHQAbwAgAAAAAAMAAAAA8woAAG4AZQBnAGEAdABpAHYAZQAgAG4AZQB3ACAAbABlAG4A
ZwB0AGgAAAEAAAAA8xYAAGMAYQBsAGwAZQBkACAAYABSAGUAcwB1AGwAdAA6ADoAdQBuAHcAcgBh
AHAAKAApAGAAIABvAG4AIABhAG4AIABgAEUAcgByAGAAIAB2AGEAbAB1AGUAAAEAAAAA8wcAAGAA
IABpAHMAIABuAG8AdAAgAHQAcgB1AGUAAAEAAAAAAAAAAPMCAAA6ACAAYAAAAQAAAADzBAAARgBB
AEkATABFAEQAOgAAAQAAAADzMAAALwBoAG8AbQBlAC8AYQB0AGwAYQBzAC8AbQBiAHQALQBwAHIA
agBzAC8AbQBiAHQALQBsAGUAZQB0AGMAbwBkAGUALQBhAHAAcgAyADQALwBkAGkAcwB0AHIAaQBi
AHUAdABlAC0AZQBsAGUAbQBlAG4AdABzAC0AaQBuAHQAbwAtAHQAdwBvAC0AYQByAHIAYQB5AHMA
LQBpAC8AbABpAGIALgBtAGIAdAA6ADYAOgAzAC0ANgA6ADQANQAAAAADAAAAAPMKAABpAG4AdgBh
AGwAaQBkACAAZQBuAGQAaQBhAG4AbgBlAHMAcwAAAAADAAAAAPQAAAAAAAAAAAAAAAAAAADzJAAA
LwBoAG8AbQBlAC8AYQB0AGwAYQBzAC8AbQBiAHQALQBwAHIAagBzAC8AbQBiAHQALQBsAGUAZQB0
AGMAbwBkAGUALQBhAHAAcgAyADQALwByAGUAcAByAGUAcwBlAG4AdABhAHQAaQBvAG4ALwBpAG4A
dAAuAG0AYgB0ADoANwA6ADMALQA3ADoANQA2AAABAAAAAPQAAAABAAAAAAAAAAAAAADzJgAALwBo
AG8AbQBlAC8AYQB0AGwAYQBzAC8AbQBiAHQALQBwAHIAagBzAC8AbQBiAHQALQBsAGUAZQB0AGMA
bwBkAGUALQBhAHAAcgAyADQALwByAGUAcAByAGUAcwBlAG4AdABhAHQAaQBvAG4ALwBpAG4AdAAu
AG0AYgB0ADoAMQAxADYAOgAzAC0AMQAxADYAOgA1ADUAAAEAAAAA9AAAAAIAAAAAAAAAAAAAAPMl
AAAvAGgAbwBtAGUALwBhAHQAbABhAHMALwBtAGIAdAAtAHAAcgBqAHMALwBtAGIAdAAtAGwAZQBl
AHQAYwBvAGQAZQAtAGEAcAByADIANAAvAHIAZQBwAHIAZQBzAGUAbgB0AGEAdABpAG8AbgAvAGkA
bgB0ADYANAAuAG0AYgB0ADoANwA6ADMALQA3ADoANQA2AAABAAAAAAAAAAA=`.trim().replace("\n", "")

/**
 * @param {number[]} nums
 * @return {number[]}
 */
var resultArray = function(nums) {
  const wasm_bytecode = Buffer.from(wasm_bytecode_base64, "base64")
  const wasm_module = new WebAssembly.Module(wasm_bytecode);
  const wasm_import = {
    spectest: {
      print_i32: (x) => {},
      print_char: (x) => {},
      print_f64: (x) => {},
    },
  };
  const wasm_instance = new WebAssembly.Instance(wasm_module, wasm_import)

  /** @type {WebAssembly.Memory} */
  const mem = wasm_instance.exports["moonbit.memory"];
  const dv = new DataView(mem.buffer);
  /** @type {Function} */
  const allocate_buffer = wasm_instance.exports.allocate_buffer
  /** @type {Function} */
  const append_arr = wasm_instance.exports.append_arr

  // allocate input & output buffers
  allocate_buffer.call(null, 0, BigInt("0x49eaa5ab0da59336"), nums.length * 4);
  allocate_buffer.call(null, 1, BigInt("0"), 0);

  let ret = []
  const pos_in = find_in_memory(mem, BigInt("0x49eaa5ab0da59336"));
  if (pos_in != null) {
    // set input data
    for (let i = 0; i < nums.length; i++) {
      dv.setUint32(pos_in + i * 4, nums[i], true);
    }
    
    // run program
    const output_arr_len = append_arr(nums.length, 0, 1);

    // get output data
    allocate_buffer.call(null, 1, BigInt("0x3196e96d300b916d"), 0);
    const pos_out = find_in_memory(mem, BigInt("0x3196e96d300b916d"));
    if (pos_out != null) {
      for (let i = 0; i < output_arr_len; i++) {
        ret.push(dv.getUint32(pos_out + i * 4, true));
      }
    } else {
      console.error("pos_out: not found")
    }
  } else {
    console.error("pos_in: not found")
  }
  
  return ret
};
